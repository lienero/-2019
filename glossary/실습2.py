

# 아이디어 1 - 사전의 엔트리에 임의 접근
# 플래시 카드 앱

from tkinter import *
import random


# 키 입력 함수:
def click():
    entered_text = entry.get()    # 텍스트 엔트리 위젯으로부터 입력한 텍스트를 수집
    output.delete(0.0, END) # 텍스트 박스 내용 지움
    try:
        definition = my_glossary[entered_text]
    except:
        definition = "입력한 단어가 엔트리에 없습니다."
    output.insert(END,definition)
       
    
       
    

def click1():
    questions = list(my_glossary.keys())# 사전의 모든 키를 숫자 인덱스로 접근할 수 있도록 리스트에 추가합니다.
    question = random.choice(questions) # 질문을 임의로 고릅니다
    entry.delete(0, END)  # 질문 입력 텍스트 박스 내용 비움 (이 입력 상자에는 열이 없고 0이 아니라 0.0으로 입력합니다.)
    output.delete(0.0, END)  # 출력 텍스트 박스 내용 비움
    entry.insert(END, question)
  

##### 메인:
window = Tk()
window.title("My Coding Club Glossary")

# 질문을 얻는 버튼을 추가합니다:
b='질문 얻기'
Button(window, text=b, width=10, command=click1).grid(row=0,column=0, sticky=W)

# 텍스트 엔트리 박스 생성
entry = Entry(window, width=20, bg="light green")
entry.grid(row=1, column=0, sticky=W)

# "답 얻기" 버튼 추가:
c='답 얻기'
Button(window, text=c, width=10, command=click).grid(row=0,column=1, sticky=E)


# 다른 레이블 생성
Label(window, text="\n정의:").grid(row=3, column=0, sticky=W)

# 텍스트 박스 생성
output = Text(window, width=75, height=6, wrap=WORD, background="light green")
output.grid(row=4, column=0, columnspan=2, sticky=W)

# 사전:
my_glossary = {
    '알고리즘': '컴퓨터로 작업을 수행하기 위해 컴퓨터가 이해할 수 있도록 단계별로 설명해 놓은 것',
    '인수': '작업을 수행할 수 있는 함수에 의해 요구되는 정보의 조각. 보통 문자 또는 숫자가 사용되며 my_function(인수)와 같이 사용합니다.',
    '2진수': '2진법으로 나타낸 숫자',
    '버그': '프로그램이 적절하게 동작하는 데 실패하거나 또는 전혀 동작하지 않는 원인을 제공하는 코드 조각',
    '형변환': '어떤 자료형을 다른 자료형으로 변환하는 과정. 예를 들면 때때로 번호가 문자 형식인 경우 숫자 형식으로 변환할 필요가 있을 때 다음과 같이 사용하여 변환합니다. int("3")',
    '주석': '컴퓨터 프로그램에 적는 텍스트로서 사람이 읽으며 프로그램 실행중에 컴퓨터가 무시합니다. 파이썬에서 모든 주석은 해시 기호(#)로 시작합니다.',
    '비교 연산자': '때때로 프로그램의 데이터를 비교할 수 있도록 논리 연산자를 호출합니다. 이 연산자는 ==, > 연산자를 포함합니다.',
    '상수': '변경되지 않는 수. 상수의 이름을 대문자로 이름 짓는 것은 좋은 습관입니다. 예: SPEED_OF_LIGHT',
    '컨테이너': '컨테이너 자료형은 여러 자료형을 그룹지어 저장하는 자료형이며 여러 컨테이너를 포함할 수 있습니다. 컨테이너 자료형은 튜플, 리스트와 사전에서 사용됩니다.',
    '자료형': '컴퓨터에 저장된 다른 정보의 형태로서 예를 들어 실수, 정수, 문자열, 튜플, 리스트와 사전이 있습니다.',
    '디버깅': '프로그램의 버그를 찾는 과정',
    '기본값': '인수 또는 변수에 주는 시작 값',
    '사전': '정렬되어 있지 않은 컨테이너 자료형으로 다른 키 값 짝의 형태로 데이터를 저장할 수 있습니다.',
    '등호 연산자': '같음을 나타내는 기호는 코딩할 때 변수에 값을 집어넣는 용도로 사용됩니다. 예를 들면 n=2는 변수 n에 2라는 값을 넣으라는 뜻입니다.',
    '이스케이프': '파이썬에서 어떤 의미를 갖는 문자가 일반적인 문자열에 필요할 때 이스케이프 해야 컴퓨터가 일반 문자열로 인식힙니다. 예. \\',
    '실행': 'run(실행)의 다른 단어로서 일부 코드를 실행하는 것을 말합니다.',
    '실수': '소수점이 있는 10진수 값을 가질 수 있는 숫자 자료형',
    '프레임': 'tkinter 위젯의 한 종류이며 다른 위젯을 포함하는 그룹 위젯으로 복잡한 사용자 인터페이스의 레이아웃을 구성하는데 사용합니다.',
    'for 반복': '컨테이너 자료형을 사용하며 반복하는 유용한 반복문의 한 종류',
    '함수': '재사용 가능한 코드 조각',
    '전역변수': '프로그램의 모든 곳에서 사용 가능한 변수',
    'GUI': '그래픽 사용자 인터페이스를 의미합니다. 버튼과 엔트리 위젯, 윈도우는 그래픽 사용자 인터페이스의 한 예제입니다.',
    '해킹': '이미 작성된 프로그램의 일부를 뜯어 고쳐서 다르게 동작하도록 하는 것을 의미합니다.',
    'IDE': '통합개발환경을 의미하며, IDLE은 그 중 하나입니다. 프로그래머에게 유용한 기능이 포함된 텍스트 편집기입니다.',
    'IDLE': '통합개발환경을 의미하며 파이썬3 설치와 함께 제공됩니다.',
    '인덱스': '문자열, 튜플 또는 리스트에서 값을 참조하기 위한 문자열로 된 숫자입니다. 컨테이너 자료형의 각 항목은 인덱스 되어 있으며 0은 첫 번째 항목을 가리키며 1은 그 다음 항목을 가리킵니다. 인덱스 값은 순차적으로 증가합니다.',
    '무한루프': '영원히 실행되는 코드 조각을 의미하며 일반적으로 이것은 좋지 않은 상황입니다.',
    '정수': '숫자 자료형으로 소수점 값을 가질 수 없으며 정수여야 합니다.',
    '대화형 모드': 'IDLE(Python IDE-통합개발환경)을 벗어나 코드를 저장하지 않고 테스트하고자 할 때 사용합니다.',
    '키': '사전에서 문자열, 튜플 또는 리스트의 인덱스에 해당하는 값으로서 프로그래머에 의해 정의되며 키로 사용할 수 있는 것은 문자열, 숫자, 실수 또는 튜플이 있습니다. key:pair에서 key에 해당합니다.',
    '리스트': '모든 유형의 값을 요소로 추가하거나 삭제할 수 있으며 정렬된 컨테이너 자료형입니다. 튜플과 유사하게 인덱스 값은 0부터 시작합니다.',
    '지역변수': '함수 내에서 정의된 변수는 그 함수 내부에서만 사용 가능합니다.',
    '논리 연산자': '비교 연산자를 참조하세요',
    '반복문': '특정 조건이 충족될 때까지 계속 반복되는 코드 조각',
    '산술 연산자': '이 연산자는 일부 숫자 자료형에서 기능을 수행하기 위해 수학 함수로 제공됩니다. 예. 곱하기 또는 더하기',
    '메서드': '클래스 안의 함수를 부르는 이름',
    '모듈': '다른 프로그램에서 사용할 수 있는 기능이 저장되어 있는 파이썬 파일',
    '모듈로': '나눗셈 계산에서 나머지를 반환하는데 사용되는 수학 연산자. 예를 들면 22 % 7를 실행하면 1이 반환됩니다.',
    '연산자': '2개의 숫자를 곱하거나 비교하거나 하는 등의 일을 할 때 사용되는 간단한 기능을 수행하는 기호. 등호 연산자도 참고하세요.',
    '정렬된 컨테이너': '정렬된 컨테이너는 컨테이너 내의 값이 위치가 정렬되어 있는 자료형을 말합니다. 정렬된 컨테이너로 튜플 또는 리스트가 있습니다. 사전의 경우 정렬되지 않는 자료형입니다.',
    '출력': '프로그램으로부터 데이터를 보다 관리하기 쉽도록 화면 또는 프린터나 기타 읽기 가능한 프로그램으로 보내는 것음 라합니다.',
    '파라미터': '함수에 사용되는 인수에 대한 다른 이름',
    '리팩터링': '반복 횟수를 줄이도록 코드의 구조를 변경하는 과정을 말합니다.',
    '반환': '1. 함수가 실행을 끝낸 후에 만들어진 값이며 파이썬 예약어입니다.\n2. 키보드에서 \'줄의 끝\'을 나타내는 엔터 키를 말합니다.',
    '스크립트 모드': 'IDLE를 사용하며 파일에 저장하는 코드를 작성할 때 도움을 줍니다.',
    '슬라이싱': '문자열 또는 컨테이너 변수에서 일부분을 추출하는 과정을 말합니다. 배열의 슬라이스로 불리기도 합니다.',
    '문장': '이 책에서는 코드의 일부 조각을 의미하는 뜻으로 사용됩니다. 엄밀히 말하면 그것은 명령이나 작업을 나타내는 코드 조각입니다.',
    '문자열': '변수에 저장된 텍스트 자료형',
    '문법 오류': '문법 오류는 프로그램을 실행하고 나서 프로그램의 코드를 인식할 수 없을 때 발생합니다. 예를 들면 코드에 괄호를 닫는 것을 누락했을 때입니다.',
    'tkinter': '파이썬 프로그램에서 클래스의 패키지를 임포트하며 윈도우와 이미지 드로잉과 애니메이션을 만들어내는 데 사용되는 유용한 메서드를 제공합니다.',
    '튜플': '정렬된 자료형으로 인덱스는 0으로부터 시작합니다. 튜플 내부의 값은 변경하지 못합니다.',
    '값': '컨테이너 자료형의 요소처럼 변수에 저장될 수 있는 모든 것',
    '변수': '컴퓨터 메모리에 저장되어 있는 값을 참조하기 위해 사용하는 이름으로 더 느슨하게는, 데이터를 참조하는 데도 사용될 수 있습니다.',
    'while 반복': '비교 문장이 True 값을 반환하는 동안 반복하는 반복문의 종류',
    '위젯': '버튼 또는 텍스트 엔트리 박스 등을 가르키는 GUI 요소'
    }

##### 메인 반복문 실행
window.mainloop()

